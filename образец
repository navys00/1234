def multijk(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m1=np.copy(mat1)
    m2=np.copy(mat2)
    empt_m1=np.copy(zeromat)
    for i in range(len(m1)):
        for j in range(len(m2[0])):
            for k in range(len(m2)):
                empt_m1[i][j]+=m1[i][k]*m2[k][j]
    print(empt_m1)
    print("time:",time.time()-start_time)
def multjki(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m3=np.copy(mat1)
    m4=np.copy(mat2)
    empt_m2=np.copy(zeromat)
    for j in range(len(m4[0])):        
        for k in range(len(m4)):
            for i in range(len(m3)):
                empt_m2[i][j]+=m3[i][k]*m4[k][j]
    print(empt_m2)
    print("time:",time.time()-start_time)
def multjik(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m5=np.copy(mat1)
    m6=np.copy(mat2)
    empt_m3=np.copy(zeromat)
    for j in range(len(m6[0])):
        for i in range(len(m5)):      
            for k in range(len(m6)):
                empt_m3[i][j]+=m5[i][k]*m6[k][j]
    print(empt_m3)
    print("time:",time.time()-start_time)
def multikj(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m7=np.copy(mat1)
    m8=np.copy(mat2)
    empt_m4=np.copy(zeromat)
    for i in range(len(m7)):
        for k in range(len(m8)):
            for j in range(len(m8[0])):           
                empt_m4[i][j]+=m7[i][k]*m8[k][j]
    print(empt_m4)
    print("time:",time.time()-start_time)
def multkji(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m9=np.copy(mat1)
    m10=np.copy(mat2)
    empt_m5=np.copy(zeromat)
    for k in range(len(m10)):
        for j in range(len(m10[0])):
            for i in range(len(m9)):                
                empt_m5[i][j]+=m9[i][k]*m10[k][j]
    print(empt_m5)
    print("time:",time.time()-start_time)
def multkij(n,x,y,z):
    start_time=time.time()
    s=n#size - размер
    m11=np.copy(mat1)
    m12=np.copy(mat2)
    empt_m6=np.copy(zeromat)  
    for k in range(len(m12)):
        for i in range(len(m11)):
            for j in range(len(m12[0])):           
                empt_m6[i][j]+=m11[i][k]*m12[k][j]
    print(empt_m6)
    print("time:",time.time()-start_time)
n=randint(5,10)#генератор размера матрицы,
mat1=np.random.uniform(1,10,size=(n,n))#1 матрица для умножения
mat2=np.random.uniform(1,10,size=(n,n))#2 мартица для умножения
zeromat=np.zeros((n,n))#нулевая матрица, куда записываем результат умножения
multijk(n,mat1,mat2,zeromat)
multjki(n,mat1,mat2,zeromat)
multjik(n,mat1,mat2,zeromat)
multikj(n,mat1,mat2,zeromat)
multkji(n,mat1,mat2,zeromat)
multkij(n,mat1,mat2,zeromat)

ijkx=np.array([0.0009980201721191406,0.0020258426666259766,0.001986265182495117,0.0019936561584472656,0.0019936561584472656,0.003991127014160156])#время работы функции для матриц разноого порядка
ijky=np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(ijkx,ijky,color='tab:red',label='multijk')
jkix= np.array([0.0010302066802978516,0.0009961128234863281,0.002007722854614258,0.001994609832763672,0.0029926300048828125,0.0009980201721191406])#время работы функции для матриц разноого порядка
jkiy= np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(jkix,jkiy,color='tab:green',label='multjki')
jikx= np.array([0.0009961128234863281,0.0009996891021728516,0.002991914749145508,0.001994609832763672,0.0019948482513427734,0.0009970664978027344])#время работы функции для матриц разноого порядка
jiky= np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(jikx,jiky,color='tab:purple',label='multjik')
ikjx= np.array([0.0009961128234863281,0.0009970664978027344,0.0019948482513427734,0.002992391586303711,0.0030188560485839844,0.0009953975677490234])#время работы функции для матриц разноого порядка
ikjy= np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(ikjx,ikjy,color='tab:orange',label='multikj')
kjix= np.array([0.0009970664978027344,0.001994609832763672,0.0029642581939697266,0.0029916763305664062,0.003983974456787109,0.0009970664978027344])#время работы функции для матриц разноого порядка
kjiy= np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(kjix,kjiy,color='tab:brown',label='multkji')
kijx= np.array([0.0010044574737548828,0.001997709274291992,0.002994060516357422,0.0019948482513427734,0.0029931068420410156,0.0009968280792236328])#время работы функции для матриц разноого порядка
kijy= np.array([5,6,7,8,9,10])#порядок матрицы
plt.plot(kijx,kijy,color='tab:cyan')
plt.legend()
plt.ylabel('Порядок матрицы')
plt.xlabel('Время работы функции')
plt.title("Зависимость времени работы программы от порядка матрицы")
pass
